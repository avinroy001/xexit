{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-13T11:15:13.532Z",
    "end": "2025-08-13T11:15:14.040Z",
    "duration": 508,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "12f53a17-2fc9-47d9-b469-c744041da27f",
      "title": "",
      "fullFile": "cypress/integration/backend/backendTests.spec.js",
      "file": "cypress/integration/backend/backendTests.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2ace94f2-f8f5-4665-b37d-67d274852507",
          "title": "Backend API Tests for Employee and Admin Role",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should register a new employee",
              "fullTitle": "Backend API Tests for Employee and Admin Role should register a new employee",
              "timedOut": null,
              "duration": 238,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request(\"POST\", `${apiUrl}/auth/register`, {\n  username: employeeUsername,\n  // Use the dynamically generated username\n  password: employeePassword\n}).then(response => {\n  expect(response.status).to.eq(201);\n  expect(response.body).to.have.property(\"message\", \"User registered successfully\");\n});",
              "err": {},
              "uuid": "2897d425-63f1-4f60-9673-8dd5776f4ab9",
              "parentUUID": "2ace94f2-f8f5-4665-b37d-67d274852507",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login the employee with valid credentials",
              "fullTitle": "Backend API Tests for Employee and Admin Role should login the employee with valid credentials",
              "timedOut": null,
              "duration": 97,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request(\"POST\", `${apiUrl}/auth/login`, {\n  username: employeeUsername,\n  // Use the same username as registration\n  password: employeePassword // Use the same password as registration\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property(\"token\");\n  Cypress.env(\"employeeAuthToken\", response.body.token); // Store token in Cypress environment variable\n});",
              "err": {},
              "uuid": "adfe2aba-b6e6-417f-9187-6f392bb606bf",
              "parentUUID": "2ace94f2-f8f5-4665-b37d-67d274852507",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should submit resignation for an employee",
              "fullTitle": "Backend API Tests for Employee and Admin Role should submit resignation for an employee",
              "timedOut": null,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const token = Cypress.env(\"employeeAuthToken\"); // Retrieve token from Cypress environment variable\n// cy.request({\n//   method: \"POST\",\n//   url: `${apiUrl}/user/resign`,\n//   headers: {\n//     Authorization: `Bearer ${token}`,\n//   },\n//   body: {\n//     lwd: \"2024-12-26\",\n//   },\n// }).then((response) => {\n//   expect(response.status).to.eq(200);\n//   employeeResignationId = response.body.data.resignation._id; // Store resignation ID for approval\n// });",
              "err": {},
              "uuid": "87239a45-34b9-4e86-ae93-1ce517a4a48c",
              "parentUUID": "2ace94f2-f8f5-4665-b37d-67d274852507",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login as admin (HR)",
              "fullTitle": "Backend API Tests for Employee and Admin Role should login as admin (HR)",
              "timedOut": null,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request(\"POST\", `${apiUrl}/auth/login`, {\n  username: \"admin\",\n  password: \"admin\"\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property(\"token\");\n  Cypress.env(\"adminAuthToken\", response.body.token); // Store admin token in Cypress environment variable\n});",
              "err": {},
              "uuid": "08c7512d-9174-41a2-8aed-521913ee4449",
              "parentUUID": "2ace94f2-f8f5-4665-b37d-67d274852507",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should view all resignations submitted by employees as admin",
              "fullTitle": "Backend API Tests for Employee and Admin Role should view all resignations submitted by employees as admin",
              "timedOut": null,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const token = Cypress.env(\"adminAuthToken\"); // Retrieve admin token from Cypress environment variable\n// cy.request({\n//   method: \"GET\",\n//   url: `${apiUrl}/admin/resignations`,\n//   headers: {\n//     Authorization: `${token}`,\n//   },\n// }).then((response) => {\n//   expect(response.status).to.eq(200);\n//   expect(response.body.data).to.be.an(\"array\");\n// });",
              "err": {},
              "uuid": "d0d09fd0-98be-499f-998e-1f93457e0bdc",
              "parentUUID": "2ace94f2-f8f5-4665-b37d-67d274852507",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should approve the employee’s resignation as admin",
              "fullTitle": "Backend API Tests for Employee and Admin Role should approve the employee’s resignation as admin",
              "timedOut": null,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const token = Cypress.env(\"adminAuthToken\"); // Retrieve admin token from Cypress environment variable\n// cy.request({\n//   method: \"PUT\",\n//   url: `${apiUrl}/admin/conclude_resignation`,\n//   headers: {\n//     Authorization: `Bearer ${token}`,\n//   },\n//   body: {\n//     resignationId: employeeResignationId,\n//     approved: true,\n//     lwd: \"26 Dec 2024\",\n//   },\n// }).then((response) => {\n//   expect(response.status).to.eq(200);\n// });",
              "err": {},
              "uuid": "6fbc31ae-9793-4fed-a657-511c396c83ef",
              "parentUUID": "2ace94f2-f8f5-4665-b37d-67d274852507",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow the employee to submit responses to exit questionnaire",
              "fullTitle": "Backend API Tests for Employee and Admin Role should allow the employee to submit responses to exit questionnaire",
              "timedOut": null,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const token = Cypress.env(\"employeeAuthToken\"); // Retrieve employee token from Cypress environment variable\n// cy.request({\n//   method: \"POST\",\n//   url: `${apiUrl}/user/responses`,\n//   headers: {\n//     Authorization: `${token}`,\n//   },\n//   body: {\n//     responses: [\n//       {\n//         questionText: \"What prompted you to start looking for another job?\",\n//         response: \"Lack of career growth opportunities\",\n//       },\n//       {\n//         questionText: \"Would you recommend this company to others?\",\n//         response: \"Yes, with some reservations\",\n//       },\n//     ],\n//   },\n// }).then((response) => {\n//   expect(response.status).to.eq(200);\n// });",
              "err": {},
              "uuid": "0ca8abd4-e18c-4e53-b8e5-01f184959066",
              "parentUUID": "2ace94f2-f8f5-4665-b37d-67d274852507",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow the admin to view all questionnaire responses",
              "fullTitle": "Backend API Tests for Employee and Admin Role should allow the admin to view all questionnaire responses",
              "timedOut": null,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const token = Cypress.env(\"adminAuthToken\"); // Retrieve admin token from Cypress environment variable\n// cy.request({\n//   method: \"GET\",\n//   url: `${apiUrl}/admin/exit_responses`,\n//   headers: {\n//     Authorization: `${token}`,\n//   },\n// }).then((response) => {\n//   expect(response.status).to.eq(200);\n//   expect(response.body.data).to.be.an(\"array\");\n//   // Find the specific response data that matches the expected responses\n//   const expectedResponses = [\n//     {\n//       questionText: \"What prompted you to start looking for another job?\",\n//       response: \"Lack of career growth opportunities\",\n//     },\n//     {\n//       questionText: \"Would you recommend this company to others?\",\n//       response: \"Yes, with some reservations\",\n//     },\n//   ];\n//   // Check if any of the data array includes the expected responses\n//   const hasExpectedResponses = response.body.data.some((item) => {\n//     return (\n//       item.responses.length === expectedResponses.length &&\n//       item.responses.every((resp, index) => {\n//         return (\n//           resp.questionText === expectedResponses[index].questionText &&\n//           resp.response === expectedResponses[index].response\n//         );\n//       })\n//     );\n//   });\n//   // Assert that the expected responses exist in the data\n//   expect(hasExpectedResponses).to.be.true;\n// });",
              "err": {},
              "uuid": "0f0c743f-f45f-4b29-8966-274173d86609",
              "parentUUID": "2ace94f2-f8f5-4665-b37d-67d274852507",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2897d425-63f1-4f60-9673-8dd5776f4ab9",
            "adfe2aba-b6e6-417f-9187-6f392bb606bf",
            "87239a45-34b9-4e86-ae93-1ce517a4a48c",
            "08c7512d-9174-41a2-8aed-521913ee4449",
            "d0d09fd0-98be-499f-998e-1f93457e0bdc",
            "6fbc31ae-9793-4fed-a657-511c396c83ef",
            "0ca8abd4-e18c-4e53-b8e5-01f184959066",
            "0f0c743f-f45f-4b29-8966-274173d86609"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 388,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "my-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "charts": true,
        "json": true,
        "reportsDir": "reports/your-reports-folder",
        "reportFilename": "my-report",
        "overwrite": false
      },
      "version": "6.2.0"
    }
  }
}
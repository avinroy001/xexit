{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-13T11:43:28.944Z",
    "end": "2025-08-13T11:43:29.416Z",
    "duration": 472,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6a888822-7eab-4c0e-bebd-6c141e99e59c",
      "title": "",
      "fullFile": "cypress/integration/backend/backendTests.spec.js",
      "file": "cypress/integration/backend/backendTests.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "368b1d56-241a-4b42-84af-21c6d126b78b",
          "title": "Backend API Tests for Employee and Admin Role",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should register a new employee",
              "fullTitle": "Backend API Tests for Employee and Admin Role should register a new employee",
              "timedOut": null,
              "duration": 231,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request(\"POST\", `${apiUrl}/auth/register`, {\n  username: employeeUsername,\n  // Use the dynamically generated username\n  password: employeePassword\n}).then(response => {\n  expect(response.status).to.eq(201);\n  expect(response.body).to.have.property(\"message\", \"User registered successfully\");\n});",
              "err": {},
              "uuid": "9f5f9a79-f501-4905-8b33-d9b0ed37350b",
              "parentUUID": "368b1d56-241a-4b42-84af-21c6d126b78b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login the employee with valid credentials",
              "fullTitle": "Backend API Tests for Employee and Admin Role should login the employee with valid credentials",
              "timedOut": null,
              "duration": 82,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request(\"POST\", `${apiUrl}/auth/login`, {\n  username: employeeUsername,\n  // Use the same username as registration\n  password: employeePassword // Use the same password as registration\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property(\"token\");\n  Cypress.env(\"employeeAuthToken\", response.body.token); // Store token in Cypress environment variable\n});",
              "err": {},
              "uuid": "7d6bd83a-d902-45f9-82f9-570c634929f0",
              "parentUUID": "368b1d56-241a-4b42-84af-21c6d126b78b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should submit resignation for an employee",
              "fullTitle": "Backend API Tests for Employee and Admin Role should submit resignation for an employee",
              "timedOut": null,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const token = Cypress.env(\"employeeAuthToken\"); // Retrieve token from Cypress environment variable\n// cy.request({\n//   method: \"POST\",\n//   url: `${apiUrl}/user/resign`,\n//   headers: {\n//     Authorization: `Bearer ${token}`,\n//   },\n//   body: {\n//     lwd: \"2024-12-26\",\n//   },\n// }).then((response) => {\n//   expect(response.status).to.eq(200);\n//   employeeResignationId = response.body.data.resignation._id; // Store resignation ID for approval\n// });",
              "err": {},
              "uuid": "070d4dbe-6238-4310-8eec-315af2c82537",
              "parentUUID": "368b1d56-241a-4b42-84af-21c6d126b78b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login as admin (HR)",
              "fullTitle": "Backend API Tests for Employee and Admin Role should login as admin (HR)",
              "timedOut": null,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request(\"POST\", `${apiUrl}/auth/login`, {\n  username: \"admin\",\n  password: \"admin\"\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property(\"token\");\n  Cypress.env(\"adminAuthToken\", response.body.token); // Store admin token in Cypress environment variable\n});",
              "err": {},
              "uuid": "f3b893c9-b33c-467c-a4a3-4c0395b72f8b",
              "parentUUID": "368b1d56-241a-4b42-84af-21c6d126b78b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should view all resignations submitted by employees as admin",
              "fullTitle": "Backend API Tests for Employee and Admin Role should view all resignations submitted by employees as admin",
              "timedOut": null,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const token = Cypress.env(\"adminAuthToken\"); // Retrieve admin token from Cypress environment variable\n// cy.request({\n//   method: \"GET\",\n//   url: `${apiUrl}/admin/resignations`,\n//   headers: {\n//     Authorization: `${token}`,\n//   },\n// }).then((response) => {\n//   expect(response.status).to.eq(200);\n//   expect(response.body.data).to.be.an(\"array\");\n// });",
              "err": {},
              "uuid": "5c49af7f-3bca-40d8-93a4-92f1ed79329c",
              "parentUUID": "368b1d56-241a-4b42-84af-21c6d126b78b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should approve the employee’s resignation as admin",
              "fullTitle": "Backend API Tests for Employee and Admin Role should approve the employee’s resignation as admin",
              "timedOut": null,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const token = Cypress.env(\"adminAuthToken\"); // Retrieve admin token from Cypress environment variable\n// cy.request({\n//   method: \"PUT\",\n//   url: `${apiUrl}/admin/conclude_resignation`,\n//   headers: {\n//     Authorization: `Bearer ${token}`,\n//   },\n//   body: {\n//     resignationId: employeeResignationId,\n//     approved: true,\n//     lwd: \"26 Dec 2024\",\n//   },\n// }).then((response) => {\n//   expect(response.status).to.eq(200);\n// });",
              "err": {},
              "uuid": "408580e1-d287-4b15-b50a-3d31636f7a8d",
              "parentUUID": "368b1d56-241a-4b42-84af-21c6d126b78b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow the employee to submit responses to exit questionnaire",
              "fullTitle": "Backend API Tests for Employee and Admin Role should allow the employee to submit responses to exit questionnaire",
              "timedOut": null,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const token = Cypress.env(\"employeeAuthToken\"); // Retrieve employee token from Cypress environment variable\n// cy.request({\n//   method: \"POST\",\n//   url: `${apiUrl}/user/responses`,\n//   headers: {\n//     Authorization: `${token}`,\n//   },\n//   body: {\n//     responses: [\n//       {\n//         questionText: \"What prompted you to start looking for another job?\",\n//         response: \"Lack of career growth opportunities\",\n//       },\n//       {\n//         questionText: \"Would you recommend this company to others?\",\n//         response: \"Yes, with some reservations\",\n//       },\n//     ],\n//   },\n// }).then((response) => {\n//   expect(response.status).to.eq(200);\n// });",
              "err": {},
              "uuid": "538a3f72-ddae-4463-bb0f-5303dff0c4f2",
              "parentUUID": "368b1d56-241a-4b42-84af-21c6d126b78b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow the admin to view all questionnaire responses",
              "fullTitle": "Backend API Tests for Employee and Admin Role should allow the admin to view all questionnaire responses",
              "timedOut": null,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const token = Cypress.env(\"adminAuthToken\"); // Retrieve admin token from Cypress environment variable\n// cy.request({\n//   method: \"GET\",\n//   url: `${apiUrl}/admin/exit_responses`,\n//   headers: {\n//     Authorization: `${token}`,\n//   },\n// }).then((response) => {\n//   expect(response.status).to.eq(200);\n//   expect(response.body.data).to.be.an(\"array\");\n//   // Find the specific response data that matches the expected responses\n//   const expectedResponses = [\n//     {\n//       questionText: \"What prompted you to start looking for another job?\",\n//       response: \"Lack of career growth opportunities\",\n//     },\n//     {\n//       questionText: \"Would you recommend this company to others?\",\n//       response: \"Yes, with some reservations\",\n//     },\n//   ];\n//   // Check if any of the data array includes the expected responses\n//   const hasExpectedResponses = response.body.data.some((item) => {\n//     return (\n//       item.responses.length === expectedResponses.length &&\n//       item.responses.every((resp, index) => {\n//         return (\n//           resp.questionText === expectedResponses[index].questionText &&\n//           resp.response === expectedResponses[index].response\n//         );\n//       })\n//     );\n//   });\n//   // Assert that the expected responses exist in the data\n//   expect(hasExpectedResponses).to.be.true;\n// });",
              "err": {},
              "uuid": "8441af1d-3b31-455f-a70e-166f04c644ba",
              "parentUUID": "368b1d56-241a-4b42-84af-21c6d126b78b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9f5f9a79-f501-4905-8b33-d9b0ed37350b",
            "7d6bd83a-d902-45f9-82f9-570c634929f0",
            "070d4dbe-6238-4310-8eec-315af2c82537",
            "f3b893c9-b33c-467c-a4a3-4c0395b72f8b",
            "5c49af7f-3bca-40d8-93a4-92f1ed79329c",
            "408580e1-d287-4b15-b50a-3d31636f7a8d",
            "538a3f72-ddae-4463-bb0f-5303dff0c4f2",
            "8441af1d-3b31-455f-a70e-166f04c644ba"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 363,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "my-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "charts": true,
        "json": true,
        "reportsDir": "reports/your-reports-folder",
        "reportFilename": "my-report",
        "overwrite": false
      },
      "version": "6.2.0"
    }
  }
}